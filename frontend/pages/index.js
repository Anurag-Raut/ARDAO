import { ConnectButton } from '@rainbow-me/rainbowkit';
import Link from 'next/link';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useAccount, useConnect, useDisconnect } from 'wagmi'
import { ToastContainer, toast } from 'react-toastify';
import { readContract,writeContract } from '@wagmi/core';
import { ethers } from "ethers";
import { useSendTransaction, usePrepareSendTransaction } from 'wagmi'
import { useContractRead } from 'wagmi'

import {
  CryptoDevsDAOABI,
  CryptoDevsDAOAddress,
  NFTMarketplaceABI,
  CryptoDevsNFTAddress,
  DAOTokenAddress,
  DAOTokenABI,
  DAOABI,
  DAOAddress
} from "../constants.js";
import {useEffect, useState} from 'react';

const Home = () => {
  const {address,isConnected}=useAccount();
  const[DaoBalance,setDaoBalance]=useState('0');
  
  console.log(NFTMarketplaceABI,'nftmarketplaccabi');
 
  const { data, isLoading, isSuccess, sendTransaction } = useSendTransaction();
  const daobalance = useContractRead({
    address: DAOAddress,
    abi: DAOABI?.abi,
    functionName: 'getBalance',
    watch: true,
  })
  console.log('balance',daobalance)
  console.log("balance data",daobalance?.data);
  // useEffect(()=>{
  //   useConnect({})
  // },[])
  useEffect(()=>{
    if(isConnected){
      console.log(daobalance?.data)
      if(daobalance?.data)
        setDaoBalance(ethers?.formatEther(daobalance?.data?.toString(),'wei').toString());
    }
    else{
      toast.error('connect to wallet', {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
        });
    }
    

  },[daobalance])

  async function BuyDaoToken(){
    console.log('hello')
    try{
      const { hash } = await writeContract({
        address: DAOTokenAddress,
        abi: DAOTokenABI.abi,
        functionName: 'mint',
        value:ethers.parseEther('0.02'),
       
      })


    }catch (error){
      toast.warn(error?.toString(), {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
        });

    }
  
    
  }

  function sendEth(){
  try{
    let amount=document.getElementById('send-eth-amount').value;
    sendTransaction({to:DAOAddress,value:ethers?.parseEther(amount)});
  }
  catch(error){
    toast.error(error?.toString(), {
      position: "top-right",
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "light",
      });
  }

  }
 
  

  


  return (
    <div className={styles.container} id='main-div'>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        <h1 className={styles.title}>
          Welcome to DAO
          
        </h1>
        

        <p className={styles.description}>
          Balance of DAO {DaoBalance} ETH
        </p>

        <div className={styles.grid}>
         

          <div className={styles.card} onClick={BuyDaoToken}>
            <h2>Buy Dao Token &rarr;</h2>
            <p>DAO tokens provides you access to the DAO .</p>
          </div>
          <Link className={styles.card} href="/createproposal">
            <h2>Create proposal &rarr;</h2>
            <p>Create proposals of the NFT you want DAO to buy</p>
          </Link>

          <Link
            className={styles.card}
            href="/viewproposals"
          >
            <h2>View Proposals &rarr;</h2>
            <p>view all existing proposals</p>
          </Link>
          <div className={styles.card} >
            <h2>Send ETH to DAO &rarr;</h2>
            <p>Donate ETH to DAO , so it can buy the ARtokens</p>
            <input type="number" id="send-eth-amount" class=" m-2block w-full p-2 text-gray-900 border border-gray-300 rounded-lg bg-gray-50 sm:text-xs focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"/>
            <button onClick={()=>{sendEth()}} type="button" class=" m-2 py-2.5 px-5 mr-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">PAY</button>
          </div>

          
        </div>
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Anurag Raut
        </a>
      </footer>
     
    </div>
  );
};

export default Home;
